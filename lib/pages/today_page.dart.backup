import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/event.dart';
import '../models/category.dart';
import '../providers/event_provider.dart';
import '../utils/sample_data_helper.dart';
import 'create_event_page.dart';

/// Today page with timeline view showing events
class TodayPage extends StatefulWidget {
  const TodayPage({super.key});

  @override
  State<TodayPage> createState() => _TodayPageState();
}

class _TodayPageState extends State<TodayPage> {
  DateTime _selectedDate = DateTime.now();

  @override
  void initState() {
    super.initState();
    // Load events when page initializes
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<EventProvider>().loadEvents();
    });
  }

  String _getDayName(int weekday) {
    switch (weekday) {
      case DateTime.monday:
        return 'Mon';
      case DateTime.tuesday:
        return 'Tue';
      case DateTime.wednesday:
        return 'Wed';
      case DateTime.thursday:
        return 'Thu';
      case DateTime.friday:
        return 'Fri';
      case DateTime.saturday:
        return 'Sat';
      case DateTime.sunday:
        return 'Sun';
      default:
        return '';
    }
  }

  bool _isToday(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year &&
        date.month == now.month &&
        date.day == now.day;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final now = DateTime.now();

    return Scaffold(
      backgroundColor: colorScheme.surface,
      appBar: AppBar(
        elevation: 0,
        scrolledUnderElevation: 3,
        surfaceTintColor: colorScheme.surfaceTint,
        backgroundColor: colorScheme.surface,
        toolbarHeight: 80,
        titleSpacing: 0,
        centerTitle: false,
        flexibleSpace: SafeArea(
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // Today text - tap to return to today
                InkWell(
                  onTap: () {
                    setState(() {
                      _selectedDate = now;
                    });
                  },
                  borderRadius: BorderRadius.circular(8),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    child: Text(
                      'Today',
                      style: theme.textTheme.displaySmall?.copyWith(
                        color: _isToday(_selectedDate)
                            ? colorScheme.primary
                            : colorScheme.onSurface,
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 24),
                // Day chips for the next 6 days
                for (int i = 1; i <= 6; i++)
                  Builder(
                    builder: (context) {
                      final date = now.add(Duration(days: i));
                      final isSelected =
                          _selectedDate.year == date.year &&
                          _selectedDate.month == date.month &&
                          _selectedDate.day == date.day;

                      return Padding(
                        padding: const EdgeInsets.only(right: 8),
                        child: ActionChip(
                          label: Text(_getDayName(date.weekday)),
                          labelStyle: theme.textTheme.labelLarge?.copyWith(
                            color: isSelected
                                ? colorScheme.onPrimaryContainer
                                : colorScheme.onSurface,
                          ),
                          side: BorderSide.none,
                          backgroundColor: isSelected
                              ? colorScheme.primaryContainer
                              : colorScheme.surfaceContainerHigh,
                          shape: const StadiumBorder(),
                          padding: const EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                          onPressed: () {
                            setState(() {
                              _selectedDate = date;
                            });
                          },
                        ),
                      );
                    },
                  ),
              ],
            ),
          ),
        ),
      ),
      body: Consumer<EventProvider>(
        builder: (context, eventProvider, child) {
          if (eventProvider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }

          if (eventProvider.error != null) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error_outline, size: 48, color: colorScheme.error),
                  const SizedBox(height: 16),
                  Text(
                    'Error loading events',
                    style: theme.textTheme.titleMedium,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    eventProvider.error!,
                    style: theme.textTheme.bodySmall,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  FilledButton.icon(
                    onPressed: () => eventProvider.loadEvents(),
                    icon: const Icon(Icons.refresh),
                    label: const Text('Retry'),
                  ),
                ],
              ),
            );
          }

          final events = eventProvider.getEventsForDate(_selectedDate);

          if (events.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.event_available,
                    size: 64,
                    color: colorScheme.onSurfaceVariant.withOpacity(0.5),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'No events for this day',
                    style: theme.textTheme.titleMedium?.copyWith(
                      color: colorScheme.onSurfaceVariant,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Tap the + button to add an event',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: colorScheme.onSurfaceVariant,
                    ),
                  ),
                ],
              ),
            );
          }

          return ListView(
            padding: const EdgeInsets.fromLTRB(16, 8, 16, 100),
            children: [
              // Event timeline
              for (final event in events)
                Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: _EventTimelineCard(
                    event: event,
                    isToday: _isToday(_selectedDate),
                  ),
                ),
            ],
          );
        },
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          // Debug button to add sample data
          Consumer<EventProvider>(
            builder: (context, provider, child) {
              if (provider.events.isEmpty) {
                return FloatingActionButton.small(
                  heroTag: 'sample_data',
                  onPressed: () async {
                    await SampleDataHelper.createSampleEvents(provider);
                    if (context.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('Sample events added!'),
                          behavior: SnackBarBehavior.floating,
                        ),
                      );
                    }
                  },
                  tooltip: 'Add Sample Data',
                  child: const Icon(Icons.add_chart),
                );
              }
              return const SizedBox.shrink();
            },
          ),
          const SizedBox(height: 8),
          FloatingActionButton(
            heroTag: 'add_event',
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      CreateEventPage(initialDate: _selectedDate),
                ),
              );
            },
            child: const Icon(Icons.add),
          ),
        ],
      ),
    );
  }
}

/// Card expansion states
enum _CardState {
  micro, // State 1: Default compact view
  full, // State 2: Extended with all details
  nowState, // State 3: NOW event with quick actions
}

/// Three-state expandable event card
class _EventTimelineCard extends StatefulWidget {
  final Event event;
  final bool isToday;

  const _EventTimelineCard({required this.event, required this.isToday});

  @override
  State<_EventTimelineCard> createState() => _EventTimelineCardState();
}

class _EventTimelineCardState extends State<_EventTimelineCard> {
  _CardState _currentState = _CardState.micro; // Default state

  @override
  void initState() {
    super.initState();
    // Auto-set to nowState if event is happening now
    final isHappening = widget.isToday && widget.event.isHappeningNow();
    if (isHappening) {
      _currentState = _CardState.nowState;
    }
  }

  void _toggleToFull() {
    setState(() {
      _currentState = _CardState.full;
    });
  }

  void _collapseToMicro() {
    setState(() {
      final isHappening = widget.isToday && widget.event.isHappeningNow();
      _currentState = isHappening ? _CardState.nowState : _CardState.micro;
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final isHappening = widget.isToday && widget.event.isHappeningNow();
    final category = widget.event.categoryIds.isNotEmpty
        ? Categories.getById(widget.event.categoryIds.first)
        : Categories.other;

    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      child: Card(
        elevation: isHappening ? 2 : 0,
        color: isHappening
            ? colorScheme.primaryContainer
            : colorScheme.surfaceContainerLow,
        clipBehavior: Clip.antiAlias,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Main content
            InkWell(
              onTap: () {
                if (_currentState == _CardState.micro ||
                    _currentState == _CardState.nowState) {
                  _toggleToFull();
                }
              },
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: _buildContent(theme, colorScheme, category, isHappening),
              ),
            ),
            // Bottom state switcher (separated by line)
            if (_currentState == _CardState.full)
              Column(
                children: [
                  Divider(
                    height: 1,
                    thickness: 1,
                    color: colorScheme.outlineVariant,
                  ),
                  Padding(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        TextButton.icon(
                          onPressed: _collapseToMicro,
                          icon: const Icon(Icons.keyboard_arrow_up, size: 18),
                          label: const Text('Collapse'),
                          style: TextButton.styleFrom(
                            foregroundColor: colorScheme.primary,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildContent(
    ThemeData theme,
    ColorScheme colorScheme,
    EventCategory category,
    bool isHappening,
  ) {
    switch (_currentState) {
      case _CardState.micro:
        return _buildMicroState(theme, colorScheme, category);
      case _CardState.full:
        return _buildFullState(theme, colorScheme, category);
      case _CardState.nowState:
        return _buildNowState(theme, colorScheme, category);
    }
  }

  /// State 1: MICRO - Icon + Title, then Time + Duration + Priority chips
  Widget _buildMicroState(
    ThemeData theme,
    ColorScheme colorScheme,
    EventCategory category,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Row 1: Icon + Title
        Row(
          children: [
            Icon(widget.event.icon, size: 24, color: category.color),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                widget.event.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  color: colorScheme.onSurface,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        // Row 2: Time + Duration + Priority chips
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            // Time chip (icon + time only)
            _buildChip(
              icon: Icons.access_time,
              label: _getStartTime(),
              color: category.color,
              colorScheme: colorScheme,
            ),
            // Duration chip
            _buildChip(
              icon: Icons.timer_outlined,
              label: _getDuration(),
              color: colorScheme.tertiary,
              colorScheme: colorScheme,
            ),
            // Priority chip (if medium/high)
            if (widget.event.priority.value >= 2)
              _buildChip(
                icon: widget.event.priority.icon,
                label: widget.event.priority.displayName,
                color: widget.event.priority.color,
                colorScheme: colorScheme,
              ),
          ],
        ),
      ],
    );
  }

  /// State 2: FULL - Extended micro with all details
  Widget _buildFullState(
    ThemeData theme,
    ColorScheme colorScheme,
    EventCategory category,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Row 1: Icon + Title (same as micro)
        Row(
          children: [
            Icon(widget.event.icon, size: 24, color: category.color),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                widget.event.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  color: colorScheme.onSurface,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        // Row 2: Time + Duration + Priority chips (same as micro)
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildChip(
              icon: Icons.access_time,
              label: _getStartTime(),
              color: category.color,
              colorScheme: colorScheme,
            ),
            _buildChip(
              icon: Icons.timer_outlined,
              label: _getDuration(),
              color: colorScheme.tertiary,
              colorScheme: colorScheme,
            ),
            if (widget.event.priority.value >= 2)
              _buildChip(
                icon: widget.event.priority.icon,
                label: widget.event.priority.displayName,
                color: widget.event.priority.color,
                colorScheme: colorScheme,
              ),
          ],
        ),
        const SizedBox(height: 16),
        // Description/Notes section
        if (widget.event.notes?.isNotEmpty ?? false) ...[
          Text(
            'Description',
            style: theme.textTheme.labelSmall?.copyWith(
              color: colorScheme.onSurfaceVariant,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: colorScheme.surfaceContainerHighest.withOpacity(0.5),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              widget.event.notes!,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: colorScheme.onSurface,
              ),
            ),
          ),
          const SizedBox(height: 12),
        ],
        // Category chips row (scrollable)
        if (widget.event.categoryIds.isNotEmpty) ...[
          Text(
            'Categories',
            style: theme.textTheme.labelSmall?.copyWith(
              color: colorScheme.onSurfaceVariant,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                for (final categoryId in widget.event.categoryIds)
                  Padding(
                    padding: const EdgeInsets.only(right: 6),
                    child: _buildCategoryChip(
                      Categories.getById(categoryId),
                      theme,
                      colorScheme,
                    ),
                  ),
              ],
            ),
          ),
          const SizedBox(height: 12),
        ],
        // Hashtags row (scrollable)
        if (widget.event.hashtags.isNotEmpty) ...[
          Text(
            'Tags',
            style: theme.textTheme.labelSmall?.copyWith(
              color: colorScheme.onSurfaceVariant,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: [
                for (final tag in widget.event.hashtags)
                  Padding(
                    padding: const EdgeInsets.only(right: 6),
                    child: _buildHashtagChip(tag, theme, colorScheme),
                  ),
              ],
            ),
          ),
          const SizedBox(height: 16),
        ],
        // Quick marks section
        Text(
          'Quick Actions',
          style: theme.textTheme.labelSmall?.copyWith(
            color: colorScheme.onSurfaceVariant,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildActionChip(
              icon: Icons.edit_outlined,
              label: 'Edit',
              onTap: () => _openEditPage(),
              colorScheme: colorScheme,
            ),
            _buildActionChip(
              icon: Icons.event_outlined,
              label: 'Reschedule',
              onTap: () => _showSnackbar('Reschedule'),
              colorScheme: colorScheme,
            ),
            _buildActionChip(
              icon: Icons.delete_outline,
              label: 'Delete',
              onTap: () => _deleteEvent(),
              colorScheme: colorScheme,
            ),
          ],
        ),
      ],
    );
  }

  /// State 3: NOW - Extended micro with NOW badge and marking actions
  Widget _buildNowState(
    ThemeData theme,
    ColorScheme colorScheme,
    EventCategory category,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Row 1: Icon + Title + NOW badge
        Row(
          children: [
            Icon(widget.event.icon, size: 24, color: category.color),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                widget.event.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  color: colorScheme.onPrimaryContainer,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            const SizedBox(width: 8),
            // NOW badge
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
              decoration: BoxDecoration(
                color: colorScheme.error,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                'NOW',
                style: TextStyle(
                  color: colorScheme.onError,
                  fontSize: 11,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 0.5,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        // Row 2: Time + Duration + Priority chips
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildChip(
              icon: Icons.access_time,
              label: _getStartTime(),
              color: category.color,
              colorScheme: colorScheme,
            ),
            _buildChip(
              icon: Icons.timer_outlined,
              label: _getDuration(),
              color: colorScheme.tertiary,
              colorScheme: colorScheme,
            ),
            if (widget.event.priority.value >= 2)
              _buildChip(
                icon: widget.event.priority.icon,
                label: widget.event.priority.displayName,
                color: widget.event.priority.color,
                colorScheme: colorScheme,
              ),
          ],
        ),
        const SizedBox(height: 16),
        // Marking actions section
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: colorScheme.surfaceContainerHighest.withOpacity(0.5),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Mark Event',
                style: theme.textTheme.labelSmall?.copyWith(
                  color: colorScheme.onSurfaceVariant,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [
                  _buildActionChip(
                    icon: Icons.check_circle_outline,
                    label: 'Done',
                    onTap: () => _markDone(),
                    colorScheme: colorScheme,
                  ),
                  _buildActionChip(
                    icon: Icons.skip_next,
                    label: 'Skip',
                    onTap: () => _skipEvent(),
                    colorScheme: colorScheme,
                  ),
                  _buildActionChip(
                    icon: Icons.event_repeat,
                    label: 'Reschedule',
                    onTap: () => _showSnackbar('Reschedule'),
                    colorScheme: colorScheme,
                  ),
                  _buildActionChip(
                    icon: Icons.snooze,
                    label: 'Snooze',
                    onTap: () => _snoozeEvent(),
                    colorScheme: colorScheme,
                  ),
                  _buildActionChip(
                    icon: Icons.pause_circle_outline,
                    label: 'Pause',
                    onTap: () => _pauseEvent(),
                    colorScheme: colorScheme,
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// Helper: Get start time only
  String _getStartTime() {
    if (widget.event.isAllDay) {
      return 'All Day';
    }
    if (widget.event.startTime == null) {
      return 'No time';
    }
    return '${widget.event.startTime!.hour.toString().padLeft(2, '0')}:${widget.event.startTime!.minute.toString().padLeft(2, '0')}';
  }

  /// Helper: Get duration string
  String _getDuration() {
    if (widget.event.durationMinutes == null ||
        widget.event.durationMinutes == 0) {
      return '30m';
    }
    final totalMinutes = widget.event.durationMinutes!;
    final hours = totalMinutes ~/ 60;
    final minutes = totalMinutes % 60;
    if (hours > 0) {
      return minutes > 0 ? '${hours}h ${minutes}m' : '${hours}h';
    }
    return '${minutes}m';
  }

  /// Build reusable chip
  Widget _buildChip({
    required IconData icon,
    required String label,
    required Color color,
    required ColorScheme colorScheme,
    bool iconOnly = false,
  }) {
    return Container(
      height: 32,
      padding: EdgeInsets.symmetric(horizontal: iconOnly ? 8 : 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          if (!iconOnly && label.isNotEmpty) ...[
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// Build category chip
  Widget _buildCategoryChip(
    EventCategory category,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
      decoration: BoxDecoration(
        color: category.color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        category.name,
        style: theme.textTheme.labelSmall?.copyWith(
          color: category.color,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// Build hashtag chip
  Widget _buildHashtagChip(
    String tag,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
      decoration: BoxDecoration(
        color: colorScheme.tertiaryContainer,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        '#$tag',
        style: theme.textTheme.labelSmall?.copyWith(
          color: colorScheme.onTertiaryContainer,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// Build action chip with tap handler
  Widget _buildActionChip({
    required IconData icon,
    String? label,
    required VoidCallback onTap,
    required ColorScheme colorScheme,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(16),
      child: Container(
        height: 32,
        padding: EdgeInsets.symmetric(
          horizontal: label == null ? 8 : 12,
          vertical: 6,
        ),
        decoration: BoxDecoration(
          color: colorScheme.secondaryContainer,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: colorScheme.onSecondaryContainer),
            if (label != null) ...[
              const SizedBox(width: 4),
              Text(
                label,
                style: TextStyle(
                  color: colorScheme.onSecondaryContainer,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// Helper: Get start time only
  String _getStartTime() {
    if (widget.event.isAllDay) {
      return 'All Day';
    }
    if (widget.event.startTime == null) {
      return 'No time';
    }
    return '${widget.event.startTime!.hour.toString().padLeft(2, '0')}:${widget.event.startTime!.minute.toString().padLeft(2, '0')}';
  }

  /// Helper: Get duration string
  String _getDuration() {
    if (widget.event.durationMinutes == null ||
        widget.event.durationMinutes == 0) {
      return '30m';
    }
    final totalMinutes = widget.event.durationMinutes!;
    final hours = totalMinutes ~/ 60;
    final minutes = totalMinutes % 60;
    if (hours > 0) {
      return minutes > 0 ? '${hours}h ${minutes}m' : '${hours}h';
    }
    return '${minutes}m';
  }

  /// Build reusable chip
  Widget _buildChip({
    required IconData icon,
    required String label,
    required Color color,
    required ColorScheme colorScheme,
    bool iconOnly = false,
  }) {
    return Container(
      height: 32,
      padding: EdgeInsets.symmetric(horizontal: iconOnly ? 8 : 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          if (!iconOnly && label.isNotEmpty) ...[
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// Build category chip
  Widget _buildCategoryChip(
    EventCategory category,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
      decoration: BoxDecoration(
        color: category.color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        category.name,
        style: theme.textTheme.labelSmall?.copyWith(
          color: category.color,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// Build hashtag chip
  Widget _buildHashtagChip(
    String tag,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
      decoration: BoxDecoration(
        color: colorScheme.tertiaryContainer,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        '#$tag',
        style: theme.textTheme.labelSmall?.copyWith(
          color: colorScheme.onTertiaryContainer,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// Build action chip with tap handler
  Widget _buildActionChip({
    required IconData icon,
    String? label,
    required VoidCallback onTap,
    required ColorScheme colorScheme,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(16),
      child: Container(
        height: 32,
        padding: EdgeInsets.symmetric(
          horizontal: label == null ? 8 : 12,
          vertical: 6,
        ),
        decoration: BoxDecoration(
          color: colorScheme.secondaryContainer,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: colorScheme.onSecondaryContainer),
            if (label != null) ...[
              const SizedBox(width: 4),
              Text(
                label,
                style: TextStyle(
                  color: colorScheme.onSecondaryContainer,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// Action handlers

  /// State 3: FULL - All details and actions
  Widget _buildFullState(
    ThemeData theme,
    ColorScheme colorScheme,
    EventCategory category,
    bool isHappening,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Top row: Time + Icon + Title + Back + Less
        Row(
          children: [
            // Time chip
            _buildChip(
              icon: Icons.access_time,
              label: widget.event.getTimeString(),
              color: category.color,
              colorScheme: colorScheme,
            ),
            const SizedBox(width: 8),
            // Icon chip
            _buildChip(
              icon: widget.event.icon,
              label: '',
              color: category.color,
              colorScheme: colorScheme,
              iconOnly: true,
            ),
            const SizedBox(width: 8),
            // Title
            Expanded(
              child: Text(
                widget.event.title,
                style: theme.textTheme.titleMedium?.copyWith(
                  color: isHappening
                      ? colorScheme.onPrimaryContainer
                      : colorScheme.onSurface,
                  fontWeight: FontWeight.w600,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            const SizedBox(width: 8),
            // Back chip
            _buildActionChip(
              icon: Icons.arrow_back,
              onTap: _collapseToMicro,
              colorScheme: colorScheme,
            ),
            const SizedBox(width: 4),
            // Less chip
            _buildActionChip(
              icon: Icons.keyboard_arrow_up,
              label: 'Less',
              onTap: () => setState(() => _currentState = _CardState.compact),
              colorScheme: colorScheme,
            ),
            // NOW badge
            if (isHappening) ...[
              const SizedBox(width: 8),
              _buildNowBadge(colorScheme),
            ],
          ],
        ),
        const SizedBox(height: 12),
        // All category chips
        if (widget.event.categoryIds.isNotEmpty) ...[
          Wrap(
            spacing: 4,
            runSpacing: 4,
            children: [
              for (final categoryId in widget.event.categoryIds)
                _buildCategoryChip(
                  Categories.getById(categoryId),
                  theme,
                  colorScheme,
                ),
            ],
          ),
          const SizedBox(height: 12),
        ],
        // Description (notes field)
        if (widget.event.notes?.isNotEmpty ?? false) ...[
          Text(
            widget.event.notes!,
            style: theme.textTheme.bodyMedium?.copyWith(
              color: colorScheme.onSurfaceVariant,
            ),
          ),
          const SizedBox(height: 12),
        ],
        // Metadata
        _buildMetadataRow(
          Icons.schedule,
          'Duration: ${_getDuration()}',
          theme,
          colorScheme,
        ),
        const SizedBox(height: 12),
        // Action chips
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildActionChip(
              icon: Icons.event_outlined,
              label: 'Reschedule',
              onTap: () => _showSnackbar('Reschedule'),
              colorScheme: colorScheme,
            ),
            _buildActionChip(
              icon: Icons.edit_outlined,
              label: 'Edit',
              onTap: () => _openEditPage(),
              colorScheme: colorScheme,
            ),
            _buildActionChip(
              icon: Icons.delete_outline,
              label: 'Delete',
              onTap: () => _deleteEvent(),
              colorScheme: colorScheme,
            ),
          ],
        ),
        // Quick actions for NOW events
        if (isHappening) ...[
          const SizedBox(height: 12),
          _buildQuickActions(colorScheme),
        ],
      ],
    );
  }

  /// Build NOW badge
  Widget _buildNowBadge(ColorScheme colorScheme) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: colorScheme.error,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        'NOW',
        style: TextStyle(
          color: colorScheme.onError,
          fontSize: 11,
          fontWeight: FontWeight.bold,
          letterSpacing: 0.5,
        ),
      ),
    );
  }

  /// Build quick action bar for NOW events
  Widget _buildQuickActions(ColorScheme colorScheme) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: colorScheme.surfaceContainerHighest.withOpacity(0.5),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Wrap(
        spacing: 6,
        runSpacing: 6,
        children: [
          _buildActionChip(
            icon: Icons.check_circle_outline,
            label: 'Done',
            onTap: () => _markDone(),
            colorScheme: colorScheme,
          ),
          _buildActionChip(
            icon: Icons.skip_next,
            label: 'Skip',
            onTap: () => _skipEvent(),
            colorScheme: colorScheme,
          ),
          _buildActionChip(
            icon: Icons.pause_circle_outline,
            label: 'Pause',
            onTap: () => _pauseEvent(),
            colorScheme: colorScheme,
          ),
          _buildActionChip(
            icon: Icons.camera_alt_outlined,
            label: 'Photo',
            onTap: () => _attachPhoto(),
            colorScheme: colorScheme,
          ),
          _buildActionChip(
            icon: Icons.snooze,
            label: 'Snooze',
            onTap: () => _snoozeEvent(),
            colorScheme: colorScheme,
          ),
          _buildActionChip(
            icon: Icons.event_repeat,
            label: 'Reschedule',
            onTap: () => _showSnackbar('Reschedule'),
            colorScheme: colorScheme,
          ),
        ],
      ),
    );
  }

  /// Build reusable chip
  Widget _buildChip({
    required IconData icon,
    required String label,
    required Color color,
    required ColorScheme colorScheme,
    bool iconOnly = false,
  }) {
    return Container(
      height: 32,
      padding: EdgeInsets.symmetric(horizontal: iconOnly ? 8 : 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          if (!iconOnly && label.isNotEmpty) ...[
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// Build category chip
  Widget _buildCategoryChip(
    EventCategory category,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
      decoration: BoxDecoration(
        color: category.color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        category.name,
        style: theme.textTheme.labelSmall?.copyWith(
          color: category.color,
          fontWeight: FontWeight.w500,
        ),
      ),
    );
  }

  /// Build action chip with tap handler
  Widget _buildActionChip({
    required IconData icon,
    String? label,
    required VoidCallback onTap,
    required ColorScheme colorScheme,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(16),
      child: Container(
        height: 32,
        padding: EdgeInsets.symmetric(
          horizontal: label == null ? 8 : 12,
          vertical: 6,
        ),
        decoration: BoxDecoration(
          color: colorScheme.secondaryContainer,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: colorScheme.onSecondaryContainer),
            if (label != null) ...[
              const SizedBox(width: 4),
              Text(
                label,
                style: TextStyle(
                  color: colorScheme.onSecondaryContainer,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// Build metadata row
  Widget _buildMetadataRow(
    IconData icon,
    String text,
    ThemeData theme,
    ColorScheme colorScheme,
  ) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4),
      child: Row(
        children: [
          Icon(icon, size: 16, color: colorScheme.onSurfaceVariant),
          const SizedBox(width: 6),
          Expanded(
            child: Text(
              text,
              style: theme.textTheme.bodySmall?.copyWith(
                color: colorScheme.onSurfaceVariant,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// Get duration string
  String _getDuration() {
    if (widget.event.durationMinutes == null ||
        widget.event.durationMinutes == 0) {
      return '30m'; // Default
    }
    final totalMinutes = widget.event.durationMinutes!;
    final hours = totalMinutes ~/ 60;
    final minutes = totalMinutes % 60;
    if (hours > 0) {
      return minutes > 0 ? '${hours}h ${minutes}m' : '${hours}h';
    }
    return '${minutes}m';
  }

  /// Action handlers
  void _markDone() {
    _showSnackbar('Marked as done!');
  }

  void _skipEvent() {
    _showSnackbar('Event skipped');
  }

  void _pauseEvent() {
    _showSnackbar('Event paused');
  }

  void _attachPhoto() {
    _showSnackbar('Photo attachment coming soon');
  }

  void _snoozeEvent() {
    // Show snooze options
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.timer),
              title: const Text('Snooze 10 minutes'),
              onTap: () {
                Navigator.pop(context);
                _showSnackbar('Snoozed for 10 minutes');
              },
            ),
            ListTile(
              leading: const Icon(Icons.timer),
              title: const Text('Snooze 30 minutes'),
              onTap: () {
                Navigator.pop(context);
                _showSnackbar('Snoozed for 30 minutes');
              },
            ),
            ListTile(
              leading: const Icon(Icons.timer),
              title: const Text('Snooze 1 hour'),
              onTap: () {
                Navigator.pop(context);
                _showSnackbar('Snoozed for 1 hour');
              },
            ),
          ],
        ),
      ),
    );
  }

  void _deleteEvent() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Event'),
        content: const Text('Are you sure you want to delete this event?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              context.read<EventProvider>().deleteEvent(widget.event.id!);
              _showSnackbar('Event deleted');
            },
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  void _openEditPage() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CreateEventPage(
          initialDate: widget.event.startDate,
          editEvent: widget.event,
        ),
      ),
    );
  }

  void _showSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        behavior: SnackBarBehavior.floating,
        duration: const Duration(seconds: 2),
      ),
    );
  }
}
